
% h1=plot(tau/t_x,y, tau/t_x,SP)
% set(h1,'linewidth',LW) 
% grid
% xlabel('tau [s]')
% ylabel('y & SP')
% legend('y','SP','Location','southeast')
% axis([0 t_sim/t_x 0 1.5])
% title(['PID-control: K_P =',num2str(K_P),' [-] & tau_N = ',...
%     num2str(tau_N),' [s]'])
Gain = [1]';
Kd = 0;
Ki = 0; 1/inf;
    
surgec = {};

figure(1);
clf;
for i=1:length(Gain)
      Kp=Gain(i);
        sim('usv_2dof_quad_drag_ssmethod_tcurve')
      surgec{i} = surge;
      tc{i} = time;
        plot(time,surge)
        hold on
        
    end

Kp=1;
sim('usv_2dof_quad_drag_ssmethod_tcurve')
d1y = gradient(surge,time);             % Numerical Derivative
d2y = del2(surge,time);                 % Numerical Second Derivative
t_infl = interp1(d1y, time, max(d1y));  % Find ‘t’ At Maximum Of First Derivative
y_infl = interp1(time, surge, t_infl);  % Find ‘y’ At Maximum Of First Derivative
slope  = interp1(time, d1y, t_infl);    % Slope Defined Here As Maximum Of First Derivative
intcpt = y_infl - slope*t_infl;         % Calculate Intercept
tngt = slope*time + intcpt;             % Calculate Tangent Line

figure(2)
plot(time, surge)
hold on
plot(time, d1y, '-.m',    time, d2y, '--c')  % Plot Derivatives (Optional)
plot(time, tngt, '-r', 'LineWidth',1)        % Plot Tangent Line
plot(t_infl, y_infl, 'bp')                   % Plot Maximum Slope
ylim([-2 2])
xlim([-2 10])
hold off
grid
legend('y(t)', 'dy/dt', 'd^2y/dt^2', 'Tangent', 'Location','E')
K = max(surge);
T1 = -intcpt/slope;
T2 = (K-intcpt)/slope - T1;